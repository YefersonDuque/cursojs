# 📦 Conexión a MySQL con Node.js desde cero

Este archivo contiene los pasos detallados para conectar una base de datos MySQL usando JavaScript (Node.js).

---

## ✅ Requisitos previos

1. Tener Node.js instalado (https://nodejs.org/)
   Verifica:
   ```
   node -v
   npm -v
   ```

2. Tener MySQL instalado y funcionando localmente (localhost:3306)

---

## 1. Crear un nuevo proyecto Node.js

```bash
mkdir conexion-mysql
cd conexion-mysql
npm init -y
```

---

## 2. Instalar el paquete mysql2

```bash
npm install mysql2
```

---

## 3. Crear el archivo de conexión: db.js

```js
// db.js
const mysql = require('mysql2');

// Crear la conexión
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'tu_contraseña', // reemplaza con tu contraseña
  database: 'nombre_de_tu_base_de_datos' // reemplaza con el nombre de tu BD
});

// Conectar
connection.connect((err) => {
  if (err) {
    console.error('❌ Error al conectar a la base de datos:', err.message);
    return;
  }
  console.log('✅ Conectado a la base de datos MySQL');
});

module.exports = connection;
```

---

## 4. Crear un archivo para hacer una consulta de prueba: index.js

```js
// index.js
const connection = require('./db');

connection.query('SELECT * FROM users', (err, results) => {
  if (err) {
    console.error('❌ Error en la consulta:', err.message);
    return;
  }
  console.log('📦 Resultados:', results);
  connection.end(); // Cierra la conexión
});
```

---

## 5. Ejecutar el proyecto

```bash
node index.js
```

Si todo está bien configurado, verás en la terminal:

```
✅ Conectado a la base de datos MySQL
📦 Resultados: [ { user_id: 1, name: 'Carlos', ... }, ... ]
```

---

## 🧪 Nota:
Puedes usar este código como base para hacer consultas más avanzadas o usar async/await.
